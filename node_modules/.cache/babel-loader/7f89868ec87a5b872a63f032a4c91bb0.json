{"ast":null,"code":"import _regeneratorRuntime from \"/Users/peterdemaio/Prime/tier3/Solo-Project-2.0/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects'; // worker Saga: will be fired on \"FETCH_USER\" actions\n\nfunction fetchUser() {\n  var config, response;\n  return _regeneratorRuntime.wrap(function fetchUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          config = {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            withCredentials: true\n          }; // the config includes credentials which\n          // allow the server session to recognize the user\n          // If a user is logged in, this will return their information\n          // from the server session (req.user)\n\n          _context.next = 4;\n          return axios.get('/api/user', config);\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return put({\n            type: 'SET_USER',\n            payload: response.data\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: 'GET_USER_PREFERENCES',\n            payload: response.data.id\n          });\n\n        case 9:\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('User get request failed', _context.t0);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('FETCH_USER', fetchUser);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default userSaga;","map":{"version":3,"sources":["/Users/peterdemaio/Prime/tier3/Solo-Project-2.0/src/redux/sagas/userSaga.js"],"names":["fetchUser","userSaga","axios","put","takeLatest","config","headers","withCredentials","get","response","type","payload","data","id","console","log"],"mappings":";;;;yBAIUA,S;;;yBAsBAC,Q;;AA1BV,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC,C,CAEA;;AACA,SAAUJ,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUK,UAAAA,MAFV,GAEmB;AACbC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aADI;AAEbC,YAAAA,eAAe,EAAE;AAFJ,WAFnB,EAOI;AACA;AACA;AACA;;AAVJ;AAWmB,iBAAML,KAAK,CAACM,GAAN,CAAU,WAAV,EAAuBH,MAAvB,CAAN;;AAXnB;AAWQI,UAAAA,QAXR;AAAA;AAeI,iBAAMN,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAE,UAAR;AAAoBC,YAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAtC,WAAD,CAAT;;AAfJ;AAAA;AAgBI,iBAAMT,GAAG,CAAC;AAACO,YAAAA,IAAI,EAAE,sBAAP;AAA+BC,YAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAAtD,WAAD,CAAT;;AAhBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBIC,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;AAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,UAAU,CAAC,YAAD,EAAeJ,SAAf,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,QAAf","sourcesContent":["import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    let response = yield axios.get('/api/user', config);\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n    yield put({type: 'GET_USER_PREFERENCES', payload: response.data.id})\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n"]},"metadata":{},"sourceType":"module"}