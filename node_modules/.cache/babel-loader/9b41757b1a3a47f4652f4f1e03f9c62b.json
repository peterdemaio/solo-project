{"ast":null,"code":"import _regeneratorRuntime from \"/Users/peterdemaio/Prime/tier3/Solo-Project-2.0/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(registerUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(registrationSaga);\n\nimport { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios'; // worker Saga: will be fired on \"REGISTER\" actions\n\nfunction registerUser(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function registerUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: 'CLEAR_REGISTRATION_ERROR'\n          });\n\n        case 3:\n          _context.next = 5;\n          return axios.post('/api/user/register', action.payload);\n\n        case 5:\n          response = _context.sent;\n          _context.next = 8;\n          return axios.post('/api/user/preferences', response.data[0]);\n\n        case 8:\n          _context.next = 10;\n          return put({\n            type: 'LOGIN',\n            payload: action.payload\n          });\n\n        case 10:\n          _context.next = 12;\n          return put({\n            type: 'SET_TO_LOGIN_MODE'\n          });\n\n        case 12:\n          _context.next = 19;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('Error with user registration:', _context.t0);\n          _context.next = 19;\n          return put({\n            type: 'REGISTRATION_FAILED'\n          });\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 14]]);\n}\n\nfunction registrationSaga() {\n  return _regeneratorRuntime.wrap(function registrationSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('REGISTER', registerUser);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default registrationSaga;","map":{"version":3,"sources":["/Users/peterdemaio/Prime/tier3/Solo-Project-2.0/src/redux/sagas/registrationSaga.js"],"names":["registerUser","registrationSaga","put","takeLatest","axios","action","type","post","payload","response","data","console","log"],"mappings":";;;;yBAIUA,Y;;;yBAoBAC,gB;;AAxBV,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAAUJ,YAAV,CAAuBK,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMH,GAAG,CAAC;AAAEI,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAT;;AAHJ;AAAA;AAMmB,iBAAMF,KAAK,CAACG,IAAN,CAAW,oBAAX,EAAiCF,MAAM,CAACG,OAAxC,CAAN;;AANnB;AAMQC,UAAAA,QANR;AAAA;AAQI,iBAAML,KAAK,CAACG,IAAN,CAAW,uBAAX,EAAoCE,QAAQ,CAACC,IAAT,CAAc,CAAd,CAApC,CAAN;;AARJ;AAAA;AAUI,iBAAMR,GAAG,CAAC;AAAEI,YAAAA,IAAI,EAAE,OAAR;AAAiBE,YAAAA,OAAO,EAAEH,MAAM,CAACG;AAAjC,WAAD,CAAT;;AAVJ;AAAA;AAaI,iBAAMN,GAAG,CAAC;AAACI,YAAAA,IAAI,EAAE;AAAP,WAAD,CAAT;;AAbJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAeMK,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AAfN;AAgBM,iBAAMV,GAAG,CAAC;AAACI,YAAAA,IAAI,EAAE;AAAP,WAAD,CAAT;;AAhBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUL,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAME,UAAU,CAAC,UAAD,EAAaH,YAAb,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,gBAAf","sourcesContent":["import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    let response = yield axios.post('/api/user/register', action.payload);\n    // creates default preferences data in database\n    yield axios.post('/api/user/preferences', response.data[0])\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n"]},"metadata":{},"sourceType":"module"}